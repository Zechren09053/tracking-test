<?php
// get_user_by_qr.php - The main API endpoint for the ticket system
// This file processes requests from the frontend and calls the appropriate functions

// Include database connection
require_once 'db_connect.php';

// Process QR code and get user data
function getUserByQRCode($qrCodeData) {
    global $conn;
    
    try {
        // Prepare SQL statement to get user by QR code
        $stmt = $conn->prepare("
            SELECT id, full_name, email, phone_number, expires_at, is_active
            FROM users 
            WHERE qr_code_data = ? AND is_active = 1
        ");
        
        $stmt->bind_param("s", $qrCodeData);
        $stmt->execute();
        
        $result = $stmt->get_result();
        
        if ($result->num_rows === 0) {
            // No user found with this QR code
            return [
                'success' => false,
                'message' => 'Invalid QR code or user not found'
            ];
        }
        
        $user = $result->fetch_assoc();
        
        // Check if ID has expired
        $currentDate = new DateTime();
        $expiryDate = new DateTime($user['expires_at']);
        
        if ($currentDate > $expiryDate) {
            return [
                'success' => false,
                'message' => 'User ID has expired',
                'user' => $user
            ];
        }
        
        return [
            'success' => true,
            'user' => $user
        ];
        
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage()
        ];
    }
}

// Get all active ferries
function getActiveFerries() {
    global $conn;
    
    try {
        $stmt = $conn->prepare("
            SELECT id, name, ferry_code
            FROM ferries
            WHERE status = 'active'
            ORDER BY name ASC
        ");
        
        $stmt->execute();
        $result = $stmt->get_result();
        
        $ferries = [];
        while ($row = $result->fetch_assoc()) {
            $ferries[] = $row;
        }
        
        return [
            'success' => true,
            'ferries' => $ferries
        ];
        
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage()
        ];
    }
}

// Get all ferry routes
function getFerryRoutes() {
    global $conn;
    
    try {
        $stmt = $conn->prepare("
            SELECT id, route_name, origin, destination
            FROM ferry_routes
            ORDER BY route_name ASC
        ");
        
        $stmt->execute();
        $result = $stmt->get_result();
        
        $routes = [];
        while ($row = $result->fetch_assoc()) {
            $routes[] = $row;
        }
        
        return [
            'success' => true,
            'routes' => $routes
        ];
        
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage()
        ];
    }
}

// Save ticket
function saveTicket($ticketData) {
    global $conn;
    
    try {
        // Begin transaction
        $conn->begin_transaction();
        
        // Insert ticket record
        $stmt = $conn->prepare("
            INSERT INTO tickets (
                user_id, 
                ferry_id, 
                ticket_type, 
                amount, 
                purchase_date,
                valid_until
            ) VALUES (?, ?, ?, ?, NOW(), ?)
        ");
        
        $stmt->bind_param(
            "iisds", 
            $ticketData['user_id'],
            $ticketData['ferry_id'],
            $ticketData['ticket_type'],
            $ticketData['amount'],
            $ticketData['valid_until']
        );
        
        $stmt->execute();
        
        // Get the inserted ticket ID
        $ticketId = $conn->insert_id;
        
        // If a ferry is full, you might check capacity here
        // And update the current_capacity of the ferry
        
        // Commit transaction
        $conn->commit();
        
        // Get ticket details for receipt
        $ticketDetails = getTicketDetails($ticketId, $ticketData['route_id']);
        
        return [
            'success' => true,
            'ticket_id' => $ticketId,
            'ticket_details' => $ticketDetails
        ];
        
    } catch (Exception $e) {
        // Roll back transaction on error
        $conn->rollback();
        
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage()
        ];
    }
}

// Get ticket details for receipt
function getTicketDetails($ticketId, $routeId) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("
            SELECT 
                t.id, 
                t.ticket_type, 
                t.amount, 
                t.purchase_date, 
                t.valid_until,
                u.full_name,
                u.email,
                u.phone_number,
                f.name as ferry_name,
                f.ferry_code,
                fr.route_name,
                fr.origin,
                fr.destination
            FROM tickets t
            JOIN users u ON t.user_id = u.id
            JOIN ferries f ON t.ferry_id = f.id
            JOIN ferry_routes fr ON fr.id = ?
            WHERE t.id = ?
        ");
        
        $stmt->bind_param("ii", $routeId, $ticketId);
        $stmt->execute();
        $result = $stmt->get_result();
        
        if ($result->num_rows === 0) {
            return null;
        }
        
        return $result->fetch_assoc();
        
    } catch (Exception $e) {
        return null;
    }
}

// Main request handler
header('Content-Type: application/json');

// Get the request type
$action = $_GET['action'] ?? '';

switch ($action) {
    case 'get_user':
        $qrCode = $_GET['qr_code'] ?? '';
        $response = getUserByQRCode($qrCode);
        echo json_encode($response);
        break;
        
    case 'get_ferries':
        $response = getActiveFerries();
        echo json_encode($response);
        break;
        
    case 'get_routes':
        $response = getFerryRoutes();
        echo json_encode($response);
        break;
        
    case 'save_ticket':
        // Validate inputs
        if (
            !isset($_POST['userId']) || 
            !isset($_POST['ferryId']) ||
            !isset($_POST['ticketType']) ||
            !isset($_POST['amount']) ||
            !isset($_POST['validUntil']) ||
            !isset($_POST['route_id'])
        ) {
            echo json_encode([
                'success' => false,
                'message' => 'Missing required fields'
            ]);
            break;
        }
        
        $ticketData = [
            'user_id' => (int)$_POST['userId'],
            'ferry_id' => (int)$_POST['ferryId'],
            'ticket_type' => $_POST['ticketType'],
            'amount' => (float)$_POST['amount'],
            'valid_until' => $_POST['validUntil'],
            'route_id' => (int)$_POST['route_id']
        ];
        
        $response = saveTicket($ticketData);
        echo json_encode($response);
        break;
        
    default:
        echo json_encode([
            'success' => false,
            'message' => 'Invalid action specified'
        ]);
}